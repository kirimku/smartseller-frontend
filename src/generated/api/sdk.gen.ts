// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as Options2, TDataShape } from './client';
import { client } from './client.gen';
import type { GetApiV1AuthGoogleLoginData, GetApiV1AuthGoogleLoginErrors, GetApiV1AuthGoogleLoginResponses, PostApiV1AuthForgotPasswordData, PostApiV1AuthForgotPasswordErrors, PostApiV1AuthForgotPasswordResponses, PostApiV1AuthGoogleCallbackData, PostApiV1AuthGoogleCallbackErrors, PostApiV1AuthGoogleCallbackResponses, PostApiV1AuthLoginData, PostApiV1AuthLoginErrors, PostApiV1AuthLoginResponses, PostApiV1AuthLogoutData, PostApiV1AuthLogoutResponses, PostApiV1AuthRefreshData, PostApiV1AuthRefreshErrors, PostApiV1AuthRefreshResponses, PostApiV1AuthResetPasswordData, PostApiV1AuthResetPasswordErrors, PostApiV1AuthResetPasswordResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Login with email/phone and password
 * Authenticates a user with email/phone and password
 */
export const postApiV1AuthLogin = <ThrowOnError extends boolean = false>(options: Options<PostApiV1AuthLoginData, ThrowOnError>) => {
    return (options.client ?? client).post<PostApiV1AuthLoginResponses, PostApiV1AuthLoginErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/v1/auth/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Google Login URL
 * Returns the Google OAuth login URL for client-side redirection.
 */
export const getApiV1AuthGoogleLogin = <ThrowOnError extends boolean = false>(options?: Options<GetApiV1AuthGoogleLoginData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiV1AuthGoogleLoginResponses, GetApiV1AuthGoogleLoginErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/v1/auth/google/login',
        ...options
    });
};

/**
 * Google Login Callback
 * Handles the callback from Google OAuth. Frontend should call this endpoint after receiving the authorization code from Google.
 */
export const postApiV1AuthGoogleCallback = <ThrowOnError extends boolean = false>(options: Options<PostApiV1AuthGoogleCallbackData, ThrowOnError>) => {
    return (options.client ?? client).post<PostApiV1AuthGoogleCallbackResponses, PostApiV1AuthGoogleCallbackErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/v1/auth/google/callback',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Logout
 * Logs out the user and invalidates the session.
 */
export const postApiV1AuthLogout = <ThrowOnError extends boolean = false>(options?: Options<PostApiV1AuthLogoutData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiV1AuthLogoutResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/api/v1/auth/logout',
        ...options
    });
};

/**
 * Refresh Token
 * Refresh the current access token using a refresh token
 */
export const postApiV1AuthRefresh = <ThrowOnError extends boolean = false>(options?: Options<PostApiV1AuthRefreshData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiV1AuthRefreshResponses, PostApiV1AuthRefreshErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/v1/auth/refresh',
        ...options
    });
};

/**
 * Initiate Password Reset
 * Initiates the password reset process by sending a reset email to the user's registered email address.
 * For security reasons, this endpoint always returns success regardless of whether the email exists in the system.
 *
 */
export const postApiV1AuthForgotPassword = <ThrowOnError extends boolean = false>(options: Options<PostApiV1AuthForgotPasswordData, ThrowOnError>) => {
    return (options.client ?? client).post<PostApiV1AuthForgotPasswordResponses, PostApiV1AuthForgotPasswordErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/v1/auth/forgot-password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Reset Password
 * Resets the user's password using a valid reset token received via email.
 * The token expires after 1 hour for security purposes.
 *
 */
export const postApiV1AuthResetPassword = <ThrowOnError extends boolean = false>(options: Options<PostApiV1AuthResetPasswordData, ThrowOnError>) => {
    return (options.client ?? client).post<PostApiV1AuthResetPasswordResponses, PostApiV1AuthResetPasswordErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/v1/auth/reset-password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};
