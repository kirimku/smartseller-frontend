// This file is auto-generated by @hey-api/openapi-ts

export type ClientOptions = {
    baseURL: 'http://localhost:8080' | (string & {});
};

export type SuccessResponse = {
    success?: boolean;
    message?: string;
    meta?: {
        http_status?: number;
    };
};

export type ErrorResponse = {
    success?: boolean;
    message?: string;
    error?: string;
    meta?: {
        http_status?: number;
    };
};

export type UserDto = {
    /**
     * Unique user identifier
     */
    id: string;
    /**
     * User's email address
     */
    email: string;
    /**
     * User's full name
     */
    name: string;
    /**
     * User's phone number
     */
    phone?: string;
    /**
     * User's profile picture URL
     */
    picture?: string;
    /**
     * User's role in the system
     */
    role?: string;
    /**
     * Account creation timestamp
     */
    created_at?: string;
    /**
     * Last update timestamp
     */
    updated_at?: string;
};

export type PostApiV1AuthLoginData = {
    body: {
        /**
         * User's email address or phone number
         */
        email_or_phone: string;
        /**
         * User's password
         */
        password: string;
    };
    path?: never;
    query?: never;
    url: '/api/v1/auth/login';
};

export type PostApiV1AuthLoginErrors = {
    /**
     * Bad request, invalid input
     */
    400: ErrorResponse;
    /**
     * Unauthorized, invalid credentials
     */
    401: ErrorResponse;
    /**
     * Internal server error
     */
    500: ErrorResponse;
};

export type PostApiV1AuthLoginError = PostApiV1AuthLoginErrors[keyof PostApiV1AuthLoginErrors];

export type PostApiV1AuthLoginResponses = {
    /**
     * Successfully authenticated
     */
    200: {
        success?: boolean;
        message?: string;
        data?: {
            /**
             * JWT token for API authentication
             */
            access_token?: string;
            /**
             * Token used to refresh the access token
             */
            refresh_token?: string;
            /**
             * Expiration time of the access token
             */
            token_expiry?: string;
            user?: UserDto;
        };
        meta?: {
            http_status?: number;
        };
    };
};

export type PostApiV1AuthLoginResponse = PostApiV1AuthLoginResponses[keyof PostApiV1AuthLoginResponses];

export type GetApiV1AuthGoogleLoginData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/auth/google/login';
};

export type GetApiV1AuthGoogleLoginErrors = {
    /**
     * Internal server error
     */
    500: ErrorResponse;
};

export type GetApiV1AuthGoogleLoginError = GetApiV1AuthGoogleLoginErrors[keyof GetApiV1AuthGoogleLoginErrors];

export type GetApiV1AuthGoogleLoginResponses = {
    /**
     * Successfully generated Google login URL
     */
    200: {
        success?: boolean;
        message?: string;
        data?: {
            /**
             * The Google OAuth URL to redirect to
             */
            redirect_url?: string;
            /**
             * CSRF protection state parameter
             */
            state?: string;
        };
        meta?: {
            http_status?: number;
        };
    };
};

export type GetApiV1AuthGoogleLoginResponse = GetApiV1AuthGoogleLoginResponses[keyof GetApiV1AuthGoogleLoginResponses];

export type PostApiV1AuthGoogleCallbackData = {
    body: {
        /**
         * Authorization code from Google
         */
        code: string;
        /**
         * State parameter for CSRF protection
         */
        state: string;
    };
    path?: never;
    query?: never;
    url: '/api/v1/auth/google/callback';
};

export type PostApiV1AuthGoogleCallbackErrors = {
    /**
     * Bad Request
     */
    400: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type PostApiV1AuthGoogleCallbackError = PostApiV1AuthGoogleCallbackErrors[keyof PostApiV1AuthGoogleCallbackErrors];

export type PostApiV1AuthGoogleCallbackResponses = {
    /**
     * Successfully authenticated
     */
    200: {
        success?: boolean;
        message?: string;
        data?: {
            /**
             * Custom JWT token generated by our backend for API authentication (not the Google OAuth token)
             */
            access_token?: string;
            /**
             * Token used to refresh the access token
             */
            refresh_token?: string;
            /**
             * Expiration time of the access token
             */
            token_expiry?: string;
            user?: {
                id?: string;
                name?: string;
                email?: string;
                picture?: string;
            };
        };
        meta?: {
            http_status?: number;
        };
    };
};

export type PostApiV1AuthGoogleCallbackResponse = PostApiV1AuthGoogleCallbackResponses[keyof PostApiV1AuthGoogleCallbackResponses];

export type PostApiV1AuthLogoutData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/auth/logout';
};

export type PostApiV1AuthLogoutResponses = {
    /**
     * Successfully logged out
     */
    200: SuccessResponse;
};

export type PostApiV1AuthLogoutResponse = PostApiV1AuthLogoutResponses[keyof PostApiV1AuthLogoutResponses];

export type PostApiV1AuthRefreshData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/auth/refresh';
};

export type PostApiV1AuthRefreshErrors = {
    /**
     * Unauthorized
     */
    401: ErrorResponse;
};

export type PostApiV1AuthRefreshError = PostApiV1AuthRefreshErrors[keyof PostApiV1AuthRefreshErrors];

export type PostApiV1AuthRefreshResponses = {
    /**
     * Successfully refreshed token
     */
    200: {
        success?: boolean;
        message?: string;
        data?: {
            access_token?: string;
            refresh_token?: string;
            token_expiry?: string;
        };
        meta?: {
            http_status?: number;
        };
    };
};

export type PostApiV1AuthRefreshResponse = PostApiV1AuthRefreshResponses[keyof PostApiV1AuthRefreshResponses];

export type PostApiV1AuthForgotPasswordData = {
    body: {
        /**
         * User's email address or phone number
         */
        email_or_phone: string;
    };
    path?: never;
    query?: never;
    url: '/api/v1/auth/forgot-password';
};

export type PostApiV1AuthForgotPasswordErrors = {
    /**
     * Bad request, invalid input
     */
    400: ErrorResponse;
    /**
     * Internal server error
     */
    500: ErrorResponse;
};

export type PostApiV1AuthForgotPasswordError = PostApiV1AuthForgotPasswordErrors[keyof PostApiV1AuthForgotPasswordErrors];

export type PostApiV1AuthForgotPasswordResponses = {
    /**
     * Request processed successfully
     */
    200: {
        success?: boolean;
        message?: string;
        meta?: {
            http_status?: number;
        };
    };
};

export type PostApiV1AuthForgotPasswordResponse = PostApiV1AuthForgotPasswordResponses[keyof PostApiV1AuthForgotPasswordResponses];

export type PostApiV1AuthResetPasswordData = {
    body: {
        /**
         * Password reset token received via email
         */
        token: string;
        /**
         * New password (minimum 8 characters)
         */
        new_password: string;
        /**
         * Confirm new password (must match new_password)
         */
        confirm_password: string;
    };
    path?: never;
    query?: never;
    url: '/api/v1/auth/reset-password';
};

export type PostApiV1AuthResetPasswordErrors = {
    /**
     * Bad request - invalid token or password
     */
    400: ErrorResponse;
    /**
     * Internal server error
     */
    500: ErrorResponse;
};

export type PostApiV1AuthResetPasswordError = PostApiV1AuthResetPasswordErrors[keyof PostApiV1AuthResetPasswordErrors];

export type PostApiV1AuthResetPasswordResponses = {
    /**
     * Password successfully reset
     */
    200: {
        success?: boolean;
        message?: string;
        meta?: {
            http_status?: number;
        };
    };
};

export type PostApiV1AuthResetPasswordResponse = PostApiV1AuthResetPasswordResponses[keyof PostApiV1AuthResetPasswordResponses];
