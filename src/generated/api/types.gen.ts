// This file is auto-generated by @hey-api/openapi-ts

export type ClientOptions = {
    baseURL: 'http://localhost:8090' | 'https://staging-api.smartseller.com' | 'https://api.smartseller.com' | (string & {});
};

/**
 * Standard error response format
 */
export type ErrorResponse = {
    /**
     * Always false for error responses
     */
    success?: boolean;
    /**
     * Human-readable error message
     */
    message?: string;
    /**
     * Error type identifier
     */
    error?: string;
    /**
     * Detailed error information
     */
    error_detail?: string;
    /**
     * List of validation error messages
     */
    validation_errors?: Array<string>;
    meta?: {
        /**
         * HTTP status code
         */
        http_status?: number;
        /**
         * Unique request identifier for debugging
         */
        request_id?: string;
        /**
         * Error timestamp
         */
        timestamp?: string;
    };
};

/**
 * Standard success response format
 */
export type SuccessResponse = {
    /**
     * Always true for successful responses
     */
    success?: boolean;
    /**
     * Human-readable success message
     */
    message?: string;
    /**
     * Response data (can be null, object, or array)
     */
    data?: {
        [key: string]: unknown;
    } | null;
    meta?: {
        request_id?: string;
        timestamp?: string;
    } | null;
};

/**
 * Pagination metadata
 */
export type PaginationMeta = {
    /**
     * Total number of items
     */
    total?: number;
    /**
     * Items per page
     */
    per_page?: number;
    /**
     * Current page number
     */
    current_page?: number;
    /**
     * Last page number
     */
    last_page?: number;
    /**
     * First item number on current page
     */
    from?: number | null;
    /**
     * Last item number on current page
     */
    to?: number | null;
    /**
     * Whether there are more pages
     */
    has_more_pages?: boolean;
};

/**
 * Request payload for customer registration
 */
export type CustomerRegistrationRequest = {
    /**
     * Customer email address (must be unique)
     */
    email: string;
    /**
     * Password (minimum 8 characters, must contain letters and numbers)
     */
    password: string;
    /**
     * Customer first name
     */
    first_name: string;
    /**
     * Customer last name
     */
    last_name: string;
    /**
     * Phone number (optional)
     */
    phone?: string;
    /**
     * Date of birth (optional)
     */
    date_of_birth?: string;
};

/**
 * Customer data response
 */
export type CustomerResponse = {
    /**
     * Unique customer identifier
     */
    id?: string;
    /**
     * Customer email address
     */
    email?: string;
    /**
     * Customer first name
     */
    first_name?: string;
    /**
     * Customer last name
     */
    last_name?: string;
    /**
     * Customer phone number
     */
    phone?: string | null;
    /**
     * Customer date of birth
     */
    date_of_birth?: string | null;
    /**
     * Customer account status
     */
    status?: 'active' | 'inactive' | 'suspended';
    /**
     * Type of customer account
     */
    customer_type?: 'individual' | 'business';
    /**
     * Email verification timestamp
     */
    email_verified_at?: string | null;
    /**
     * Last login timestamp
     */
    last_login_at?: string | null;
    /**
     * Account creation timestamp
     */
    created_at?: string;
    /**
     * Last update timestamp
     */
    updated_at?: string;
};

/**
 * Request payload for updating customer profile
 */
export type CustomerUpdateRequest = {
    /**
     * Customer first name
     */
    first_name?: string;
    /**
     * Customer last name
     */
    last_name?: string;
    /**
     * Customer phone number
     */
    phone?: string;
    /**
     * Customer date of birth
     */
    date_of_birth?: string;
};

/**
 * Request payload for creating a new address
 */
export type CreateAddressRequest = {
    /**
     * Customer ID who owns this address
     */
    customer_id: string;
    /**
     * Address label (e.g., Home, Office, Warehouse)
     */
    label: string;
    /**
     * Name of the person who will receive deliveries
     */
    recipient_name: string;
    /**
     * Contact phone number for this address
     */
    phone: string;
    /**
     * Primary address line (street, number)
     */
    address_line_1: string;
    /**
     * Secondary address line (apartment, suite, etc.)
     */
    address_line_2?: string | null;
    /**
     * City name
     */
    city: string;
    /**
     * State or province
     */
    state: string;
    /**
     * Postal or ZIP code
     */
    postal_code: string;
    /**
     * Country name
     */
    country: string;
    /**
     * Whether this is the default address
     */
    is_default?: boolean;
};

/**
 * Customer address data response
 */
export type CustomerAddressResponse = {
    /**
     * Unique address identifier
     */
    id?: string;
    /**
     * Customer who owns this address
     */
    customer_id?: string;
    /**
     * Address label
     */
    label?: string;
    /**
     * Recipient name
     */
    recipient_name?: string;
    /**
     * Contact phone
     */
    phone?: string;
    /**
     * Primary address line
     */
    address_line_1?: string;
    /**
     * Secondary address line
     */
    address_line_2?: string | null;
    /**
     * City
     */
    city?: string;
    /**
     * State or province
     */
    state?: string;
    /**
     * Postal code
     */
    postal_code?: string;
    /**
     * Country
     */
    country?: string;
    /**
     * Whether this is the default address
     */
    is_default?: boolean;
    /**
     * Geocoded latitude coordinate
     */
    latitude?: number | null;
    /**
     * Geocoded longitude coordinate
     */
    longitude?: number | null;
    /**
     * Whether the address has been verified
     */
    is_verified?: boolean;
    /**
     * Creation timestamp
     */
    created_at?: string;
    /**
     * Last update timestamp
     */
    updated_at?: string;
};

/**
 * Request payload for creating a new storefront
 */
export type CreateStorefrontRequest = {
    /**
     * Customer ID who owns this storefront
     */
    customer_id: string;
    /**
     * Display name of the storefront
     */
    name: string;
    /**
     * URL-friendly identifier (must be unique)
     */
    slug: string;
    /**
     * Custom domain for the storefront (must be unique)
     */
    domain: string;
    /**
     * Store description
     */
    description?: string | null;
    /**
     * URL to store logo image
     */
    logo_url?: string | null;
    /**
     * Visual theme for the storefront
     */
    theme?: 'default' | 'modern' | 'classic' | 'minimal';
};

/**
 * Storefront data response
 */
export type StorefrontResponse = {
    /**
     * Unique storefront identifier
     */
    id?: string;
    /**
     * Owner customer ID
     */
    customer_id?: string;
    /**
     * Storefront display name
     */
    name?: string;
    /**
     * URL slug
     */
    slug?: string;
    /**
     * Custom domain
     */
    domain?: string;
    /**
     * Store description
     */
    description?: string | null;
    /**
     * Logo URL
     */
    logo_url?: string | null;
    /**
     * Visual theme
     */
    theme?: string;
    /**
     * Storefront status
     */
    status?: 'active' | 'inactive' | 'suspended' | 'draft';
    /**
     * Creation timestamp
     */
    created_at?: string;
    /**
     * Last update timestamp
     */
    updated_at?: string;
};

export type CreateProductRequest = {
    /**
     * Product name
     */
    name: string;
    /**
     * Product description
     */
    description: string;
    /**
     * Product price
     */
    price: number;
    /**
     * Product category ID
     */
    category_id: string;
    /**
     * Stock Keeping Unit
     */
    sku?: string;
    /**
     * Available stock quantity
     */
    stock_quantity?: number;
    /**
     * Product weight in kg
     */
    weight?: number;
    dimensions?: {
        length?: number;
        width?: number;
        height?: number;
    };
    /**
     * Product image URLs
     */
    images?: Array<string>;
    /**
     * Whether the product is active
     */
    is_active?: boolean;
};

export type UpdateProductRequest = {
    /**
     * Product name
     */
    name?: string;
    /**
     * Product description
     */
    description?: string;
    /**
     * Product price
     */
    price?: number;
    /**
     * Product category ID
     */
    category_id?: string;
    /**
     * Stock Keeping Unit
     */
    sku?: string;
    /**
     * Available stock quantity
     */
    stock_quantity?: number;
    /**
     * Product weight in kg
     */
    weight?: number;
    dimensions?: {
        length?: number;
        width?: number;
        height?: number;
    };
    /**
     * Product image URLs
     */
    images?: Array<string>;
    /**
     * Whether the product is active
     */
    is_active?: boolean;
};

export type ProductResponse = {
    /**
     * Product unique identifier
     */
    id: string;
    /**
     * Product name
     */
    name: string;
    /**
     * Product description
     */
    description: string;
    /**
     * Product price
     */
    price: number;
    /**
     * Product category ID
     */
    category_id: string;
    /**
     * Stock Keeping Unit
     */
    sku: string;
    /**
     * Available stock quantity
     */
    stock_quantity: number;
    /**
     * Product weight in kg
     */
    weight?: number | null;
    dimensions?: {
        length?: number;
        width?: number;
        height?: number;
    } | null;
    /**
     * Product image URLs
     */
    images?: Array<string>;
    /**
     * Whether the product is active
     */
    is_active: boolean;
    /**
     * Product creation timestamp
     */
    created_at: string;
    /**
     * Product last update timestamp
     */
    updated_at: string;
};

export type ProductListItem = {
    /**
     * Product unique identifier
     */
    id: string;
    /**
     * Product name
     */
    name: string;
    /**
     * Product price
     */
    price: number;
    /**
     * Stock Keeping Unit
     */
    sku: string;
    /**
     * Available stock quantity
     */
    stock_quantity: number;
    /**
     * Whether the product is active
     */
    is_active: boolean;
    /**
     * Product thumbnail image URL
     */
    thumbnail?: string | null;
};

export type ProductListResponse = {
    success: boolean;
    message: string;
    data: Array<ProductListItem>;
    meta: PaginationMeta;
};

export type CreateVariantOptionRequest = {
    /**
     * Name of the variant option (e.g., "Size", "Color")
     */
    option_name: string;
    /**
     * Array of possible values for this option
     */
    option_values: Array<string>;
};

export type VariantOptionResponse = {
    /**
     * Variant option unique identifier
     */
    id: string;
    /**
     * Product ID this option belongs to
     */
    product_id: string;
    /**
     * Name of the variant option
     */
    option_name: string;
    /**
     * Array of possible values for this option
     */
    option_values: Array<string>;
    /**
     * Option creation timestamp
     */
    created_at: string;
    /**
     * Option last update timestamp
     */
    updated_at: string;
};

export type CreateVariantRequest = {
    /**
     * Key-value pairs of option names and selected values
     */
    variant_options: {
        [key: string]: string;
    };
    /**
     * Stock Keeping Unit for this variant
     */
    sku: string;
    /**
     * Base price for this variant
     */
    base_price: number;
    /**
     * Sale price (optional, defaults to base_price)
     */
    sale_price?: number | null;
    /**
     * Cost price for profit calculations
     */
    cost_price?: number | null;
    /**
     * Available stock quantity
     */
    stock_quantity: number;
    /**
     * Product weight in kg
     */
    weight?: number | null;
    /**
     * Product dimensions
     */
    dimensions?: {
        length?: number;
        width?: number;
        height?: number;
    } | null;
    /**
     * Whether this variant is active
     */
    is_active?: boolean;
};

export type ProductVariantResponse = {
    /**
     * Variant unique identifier
     */
    id: string;
    /**
     * Product ID this variant belongs to
     */
    product_id: string;
    /**
     * Key-value pairs of option names and selected values
     */
    variant_options: {
        [key: string]: string;
    };
    /**
     * Stock Keeping Unit for this variant
     */
    sku: string;
    /**
     * Base price for this variant
     */
    base_price: number;
    /**
     * Sale price
     */
    sale_price?: number | null;
    /**
     * Cost price
     */
    cost_price?: number | null;
    /**
     * Available stock quantity
     */
    stock_quantity: number;
    /**
     * Product weight in kg
     */
    weight?: number | null;
    /**
     * Product dimensions
     */
    dimensions?: {
        length?: number;
        width?: number;
        height?: number;
    } | null;
    /**
     * Whether this variant is active
     */
    is_active: boolean;
    /**
     * Variant creation timestamp
     */
    created_at: string;
    /**
     * Variant last update timestamp
     */
    updated_at: string;
};

export type GenerateVariantsRequest = {
    /**
     * Base price for all generated variants
     */
    base_price: number;
    /**
     * Sale price for all generated variants
     */
    sale_price?: number | null;
    /**
     * Cost price for all generated variants
     */
    cost_price?: number | null;
    /**
     * Stock quantity for all generated variants
     */
    stock_quantity: number;
    /**
     * Weight for all generated variants
     */
    weight?: number | null;
    /**
     * Price adjustments for specific option values
     */
    price_adjustments?: {
        [key: string]: {
            [key: string]: number;
        };
    } | null;
};

export type GenerateVariantsResponse = {
    /**
     * Number of variants successfully created
     */
    variants_created: number;
    /**
     * Total possible combinations
     */
    total_combinations: number;
    /**
     * Number of combinations skipped (duplicates)
     */
    skipped_combinations: number;
    /**
     * List of created variant IDs
     */
    created_variants?: Array<string>;
};

/**
 * Customer ID
 */
export type CustomerIdParam = string;

/**
 * Storefront ID
 */
export type StorefrontIdParam = string;

/**
 * Address ID
 */
export type AddressIdParam = string;

/**
 * Page number for pagination
 */
export type PageParam = number;

/**
 * Number of items per page
 */
export type PageSizeParam = number;

/**
 * Search query string
 */
export type SearchQueryParam = string;

export type PostApiV1AuthLoginData = {
    body: {
        /**
         * User's email address or phone number
         */
        email_or_phone: string;
        /**
         * User's password
         */
        password: string;
        /**
         * If true, tokens will be stored in httpOnly cookies for enhanced security
         */
        use_secure_tokens?: boolean;
    };
    path?: never;
    query?: never;
    url: '/api/v1/auth/login';
};

export type PostApiV1AuthLoginErrors = {
    /**
     * Bad Request - Validation errors
     */
    400: ErrorResponse;
    /**
     * Unauthorized - Authentication required
     */
    401: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type PostApiV1AuthLoginError = PostApiV1AuthLoginErrors[keyof PostApiV1AuthLoginErrors];

export type PostApiV1AuthLoginResponses = {
    /**
     * Successfully authenticated. If use_secure_tokens is true, tokens are also set as httpOnly cookies.
     */
    200: {
        success?: boolean;
        message?: string;
        data?: {
            /**
             * JWT token for API authentication
             */
            access_token?: string;
            /**
             * Token used to refresh the access token
             */
            refresh_token?: string;
            /**
             * Expiration time of the access token
             */
            token_expiry?: string;
            user?: {
                id?: string;
                email?: string;
                first_name?: string;
                last_name?: string;
                phone?: string | null;
                status?: 'active' | 'inactive' | 'suspended';
                created_at?: string;
                updated_at?: string;
            };
        };
        meta?: {
            http_status?: number;
        };
    };
};

export type PostApiV1AuthLoginResponse = PostApiV1AuthLoginResponses[keyof PostApiV1AuthLoginResponses];

export type PostApiV1AuthLogoutData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/auth/logout';
};

export type PostApiV1AuthLogoutResponses = {
    /**
     * Successfully logged out
     */
    200: SuccessResponse;
};

export type PostApiV1AuthLogoutResponse = PostApiV1AuthLogoutResponses[keyof PostApiV1AuthLogoutResponses];

export type PostApiV1AuthRefreshData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/auth/refresh';
};

export type PostApiV1AuthRefreshErrors = {
    /**
     * Unauthorized - Authentication required
     */
    401: ErrorResponse;
};

export type PostApiV1AuthRefreshError = PostApiV1AuthRefreshErrors[keyof PostApiV1AuthRefreshErrors];

export type PostApiV1AuthRefreshResponses = {
    /**
     * Successfully refreshed token
     */
    200: {
        success?: boolean;
        message?: string;
        data?: {
            access_token?: string;
            refresh_token?: string;
            token_expiry?: string;
        };
        meta?: {
            http_status?: number;
        };
    };
};

export type PostApiV1AuthRefreshResponse = PostApiV1AuthRefreshResponses[keyof PostApiV1AuthRefreshResponses];

export type PostApiV1AuthForgotPasswordData = {
    body: {
        /**
         * User's email address or phone number
         */
        email_or_phone: string;
    };
    path?: never;
    query?: never;
    url: '/api/v1/auth/forgot-password';
};

export type PostApiV1AuthForgotPasswordErrors = {
    /**
     * Bad Request - Validation errors
     */
    400: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type PostApiV1AuthForgotPasswordError = PostApiV1AuthForgotPasswordErrors[keyof PostApiV1AuthForgotPasswordErrors];

export type PostApiV1AuthForgotPasswordResponses = {
    /**
     * Request processed successfully
     */
    200: {
        success?: boolean;
        message?: string;
        meta?: {
            http_status?: number;
        };
    };
};

export type PostApiV1AuthForgotPasswordResponse = PostApiV1AuthForgotPasswordResponses[keyof PostApiV1AuthForgotPasswordResponses];

export type PostApiV1AuthResetPasswordData = {
    body: {
        /**
         * Password reset token received via email
         */
        token: string;
        /**
         * New password (minimum 8 characters)
         */
        new_password: string;
        /**
         * Confirm new password (must match new_password)
         */
        confirm_password: string;
    };
    path?: never;
    query?: never;
    url: '/api/v1/auth/reset-password';
};

export type PostApiV1AuthResetPasswordErrors = {
    /**
     * Bad Request - Validation errors
     */
    400: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type PostApiV1AuthResetPasswordError = PostApiV1AuthResetPasswordErrors[keyof PostApiV1AuthResetPasswordErrors];

export type PostApiV1AuthResetPasswordResponses = {
    /**
     * Password successfully reset
     */
    200: {
        success?: boolean;
        message?: string;
        meta?: {
            http_status?: number;
        };
    };
};

export type PostApiV1AuthResetPasswordResponse = PostApiV1AuthResetPasswordResponses[keyof PostApiV1AuthResetPasswordResponses];

export type PostCustomersRegisterData = {
    body: CustomerRegistrationRequest;
    path?: never;
    query?: never;
    url: '/customers/register';
};

export type PostCustomersRegisterErrors = {
    /**
     * Bad Request - Validation errors
     */
    400: ErrorResponse;
    /**
     * Conflict - Resource already exists
     */
    409: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type PostCustomersRegisterError = PostCustomersRegisterErrors[keyof PostCustomersRegisterErrors];

export type PostCustomersRegisterResponses = {
    /**
     * Customer registered successfully
     */
    201: {
        success?: boolean;
        message?: string;
        data?: CustomerResponse;
    };
};

export type PostCustomersRegisterResponse = PostCustomersRegisterResponses[keyof PostCustomersRegisterResponses];

export type GetApiV1CategoriesData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Filter by parent category ID (use 'null' for root categories)
         */
        parent_id?: string;
        /**
         * Filter by active status
         */
        is_active?: boolean;
        /**
         * Search categories by name or description
         */
        search?: string;
        /**
         * Include child categories in response
         */
        include_children?: boolean;
        /**
         * Include product count for each category
         */
        include_products?: boolean;
        /**
         * Maximum depth for hierarchical results
         */
        max_depth?: number;
        /**
         * Page number for pagination
         */
        page?: number;
        /**
         * Number of items per page
         */
        page_size?: number;
    };
    url: '/api/v1/categories';
};

export type GetApiV1CategoriesErrors = {
    /**
     * Bad Request - Validation errors
     */
    400: ErrorResponse;
    /**
     * Unauthorized - Authentication required
     */
    401: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type GetApiV1CategoriesError = GetApiV1CategoriesErrors[keyof GetApiV1CategoriesErrors];

export type GetApiV1CategoriesResponses = {
    /**
     * Categories retrieved successfully
     */
    200: {
        success?: boolean;
        message?: string;
        data?: Array<{
            id?: string;
            name?: string;
            description?: string | null;
            slug?: string;
            parent_id?: string | null;
            is_active?: boolean;
            product_count?: number;
            children_count?: number;
        }>;
        meta?: PaginationMeta;
    };
};

export type GetApiV1CategoriesResponse = GetApiV1CategoriesResponses[keyof GetApiV1CategoriesResponses];

export type GetApiV1ProductsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Page number (1-based)
         */
        page?: number;
        /**
         * Number of items per page
         */
        page_size?: number;
        /**
         * Field to sort by
         */
        sort_by?: 'name' | 'created_at' | 'updated_at' | 'base_price';
        /**
         * Sort in descending order
         */
        sort_desc?: boolean;
        /**
         * Search term for product name, description, or SKU
         */
        search?: string;
        /**
         * Filter by category ID
         */
        category_id?: string;
        /**
         * Filter by brand
         */
        brand?: string;
        /**
         * Filter by product status
         */
        status?: 'draft' | 'active' | 'inactive' | 'archived';
        /**
         * Minimum price filter
         */
        min_price?: number;
        /**
         * Maximum price filter
         */
        max_price?: number;
        /**
         * Filter products with low stock
         */
        low_stock?: boolean;
    };
    url: '/api/v1/products';
};

export type GetApiV1ProductsErrors = {
    /**
     * Bad Request - Validation errors
     */
    400: ErrorResponse;
    /**
     * Unauthorized - Authentication required
     */
    401: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type GetApiV1ProductsError = GetApiV1ProductsErrors[keyof GetApiV1ProductsErrors];

export type GetApiV1ProductsResponses = {
    /**
     * Products retrieved successfully
     */
    200: {
        success?: boolean;
        message?: string;
        data?: ProductListResponse;
    };
};

export type GetApiV1ProductsResponse = GetApiV1ProductsResponses[keyof GetApiV1ProductsResponses];

export type PostApiV1ProductsData = {
    body: CreateProductRequest;
    path?: never;
    query?: never;
    url: '/api/v1/products';
};

export type PostApiV1ProductsErrors = {
    /**
     * Bad Request - Validation errors
     */
    400: ErrorResponse;
    /**
     * Unauthorized - Authentication required
     */
    401: ErrorResponse;
    /**
     * Conflict - Resource already exists
     */
    409: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type PostApiV1ProductsError = PostApiV1ProductsErrors[keyof PostApiV1ProductsErrors];

export type PostApiV1ProductsResponses = {
    /**
     * Product created successfully
     */
    201: {
        success?: boolean;
        message?: string;
        data?: ProductResponse;
    };
};

export type PostApiV1ProductsResponse = PostApiV1ProductsResponses[keyof PostApiV1ProductsResponses];

export type DeleteApiV1ProductsByIdData = {
    body?: never;
    path: {
        /**
         * Product ID
         */
        id: string;
    };
    query?: never;
    url: '/api/v1/products/{id}';
};

export type DeleteApiV1ProductsByIdErrors = {
    /**
     * Bad Request - Validation errors
     */
    400: ErrorResponse;
    /**
     * Unauthorized - Authentication required
     */
    401: ErrorResponse;
    /**
     * Not Found - Resource doesn't exist
     */
    404: ErrorResponse;
    /**
     * Conflict - Resource already exists
     */
    409: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type DeleteApiV1ProductsByIdError = DeleteApiV1ProductsByIdErrors[keyof DeleteApiV1ProductsByIdErrors];

export type DeleteApiV1ProductsByIdResponses = {
    /**
     * Product deleted successfully
     */
    200: {
        success?: boolean;
        message?: string;
        data?: unknown;
    };
};

export type DeleteApiV1ProductsByIdResponse = DeleteApiV1ProductsByIdResponses[keyof DeleteApiV1ProductsByIdResponses];

export type GetApiV1ProductsByIdData = {
    body?: never;
    path: {
        /**
         * Product ID
         */
        id: string;
    };
    query?: {
        /**
         * Include related data (comma-separated)
         */
        include?: string;
    };
    url: '/api/v1/products/{id}';
};

export type GetApiV1ProductsByIdErrors = {
    /**
     * Bad Request - Validation errors
     */
    400: ErrorResponse;
    /**
     * Unauthorized - Authentication required
     */
    401: ErrorResponse;
    /**
     * Not Found - Resource doesn't exist
     */
    404: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type GetApiV1ProductsByIdError = GetApiV1ProductsByIdErrors[keyof GetApiV1ProductsByIdErrors];

export type GetApiV1ProductsByIdResponses = {
    /**
     * Product retrieved successfully
     */
    200: {
        success?: boolean;
        message?: string;
        data?: ProductResponse;
    };
};

export type GetApiV1ProductsByIdResponse = GetApiV1ProductsByIdResponses[keyof GetApiV1ProductsByIdResponses];

export type PutApiV1ProductsByIdData = {
    body: UpdateProductRequest;
    path: {
        /**
         * Product ID
         */
        id: string;
    };
    query?: never;
    url: '/api/v1/products/{id}';
};

export type PutApiV1ProductsByIdErrors = {
    /**
     * Bad Request - Validation errors
     */
    400: ErrorResponse;
    /**
     * Unauthorized - Authentication required
     */
    401: ErrorResponse;
    /**
     * Not Found - Resource doesn't exist
     */
    404: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type PutApiV1ProductsByIdError = PutApiV1ProductsByIdErrors[keyof PutApiV1ProductsByIdErrors];

export type PutApiV1ProductsByIdResponses = {
    /**
     * Product updated successfully
     */
    200: {
        success?: boolean;
        message?: string;
        data?: ProductResponse;
    };
};

export type PutApiV1ProductsByIdResponse = PutApiV1ProductsByIdResponses[keyof PutApiV1ProductsByIdResponses];

export type PostApiV1ProductsByProductIdVariantOptionsData = {
    body: CreateVariantOptionRequest;
    path: {
        /**
         * Product ID
         */
        product_id: string;
    };
    query?: never;
    url: '/api/v1/products/{product_id}/variant-options';
};

export type PostApiV1ProductsByProductIdVariantOptionsErrors = {
    /**
     * Bad Request - Validation errors
     */
    400: ErrorResponse;
    /**
     * Unauthorized - Authentication required
     */
    401: ErrorResponse;
    /**
     * Not Found - Resource doesn't exist
     */
    404: ErrorResponse;
    /**
     * Conflict - Resource already exists
     */
    409: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type PostApiV1ProductsByProductIdVariantOptionsError = PostApiV1ProductsByProductIdVariantOptionsErrors[keyof PostApiV1ProductsByProductIdVariantOptionsErrors];

export type PostApiV1ProductsByProductIdVariantOptionsResponses = {
    /**
     * Variant option created successfully
     */
    201: {
        success?: boolean;
        message?: string;
        data?: VariantOptionResponse;
    };
};

export type PostApiV1ProductsByProductIdVariantOptionsResponse = PostApiV1ProductsByProductIdVariantOptionsResponses[keyof PostApiV1ProductsByProductIdVariantOptionsResponses];

export type PostApiV1ProductsByProductIdVariantsData = {
    body: CreateVariantRequest;
    path: {
        /**
         * Product ID
         */
        product_id: string;
    };
    query?: never;
    url: '/api/v1/products/{product_id}/variants';
};

export type PostApiV1ProductsByProductIdVariantsErrors = {
    /**
     * Bad Request - Validation errors
     */
    400: ErrorResponse;
    /**
     * Unauthorized - Authentication required
     */
    401: ErrorResponse;
    /**
     * Not Found - Resource doesn't exist
     */
    404: ErrorResponse;
    /**
     * Conflict - Resource already exists
     */
    409: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type PostApiV1ProductsByProductIdVariantsError = PostApiV1ProductsByProductIdVariantsErrors[keyof PostApiV1ProductsByProductIdVariantsErrors];

export type PostApiV1ProductsByProductIdVariantsResponses = {
    /**
     * Product variant created successfully
     */
    201: {
        success?: boolean;
        message?: string;
        data?: ProductVariantResponse;
    };
};

export type PostApiV1ProductsByProductIdVariantsResponse = PostApiV1ProductsByProductIdVariantsResponses[keyof PostApiV1ProductsByProductIdVariantsResponses];

export type PostApiV1ProductsByProductIdVariantsGenerateData = {
    body: GenerateVariantsRequest;
    path: {
        /**
         * Product ID
         */
        product_id: string;
    };
    query?: never;
    url: '/api/v1/products/{product_id}/variants/generate';
};

export type PostApiV1ProductsByProductIdVariantsGenerateErrors = {
    /**
     * Bad Request - Validation errors
     */
    400: ErrorResponse;
    /**
     * Unauthorized - Authentication required
     */
    401: ErrorResponse;
    /**
     * Not Found - Resource doesn't exist
     */
    404: ErrorResponse;
    /**
     * Conflict - Resource already exists
     */
    409: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type PostApiV1ProductsByProductIdVariantsGenerateError = PostApiV1ProductsByProductIdVariantsGenerateErrors[keyof PostApiV1ProductsByProductIdVariantsGenerateErrors];

export type PostApiV1ProductsByProductIdVariantsGenerateResponses = {
    /**
     * Product variants generated successfully
     */
    201: {
        success?: boolean;
        message?: string;
        data?: GenerateVariantsResponse;
    };
};

export type PostApiV1ProductsByProductIdVariantsGenerateResponse = PostApiV1ProductsByProductIdVariantsGenerateResponses[keyof PostApiV1ProductsByProductIdVariantsGenerateResponses];

export type GetCustomersByIdData = {
    body?: never;
    path: {
        /**
         * Customer ID
         */
        id: string;
    };
    query?: never;
    url: '/customers/{id}';
};

export type GetCustomersByIdErrors = {
    /**
     * Unauthorized - Authentication required
     */
    401: ErrorResponse;
    /**
     * Forbidden - Insufficient permissions
     */
    403: ErrorResponse;
    /**
     * Not Found - Resource doesn't exist
     */
    404: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type GetCustomersByIdError = GetCustomersByIdErrors[keyof GetCustomersByIdErrors];

export type GetCustomersByIdResponses = {
    /**
     * Customer retrieved successfully
     */
    200: {
        success?: boolean;
        message?: string;
        data?: CustomerResponse;
    };
};

export type GetCustomersByIdResponse = GetCustomersByIdResponses[keyof GetCustomersByIdResponses];

export type PutCustomersByIdData = {
    body: CustomerUpdateRequest;
    path: {
        /**
         * Customer ID
         */
        id: string;
    };
    query?: never;
    url: '/customers/{id}';
};

export type PutCustomersByIdErrors = {
    /**
     * Bad Request - Validation errors
     */
    400: ErrorResponse;
    /**
     * Unauthorized - Authentication required
     */
    401: ErrorResponse;
    /**
     * Forbidden - Insufficient permissions
     */
    403: ErrorResponse;
    /**
     * Not Found - Resource doesn't exist
     */
    404: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type PutCustomersByIdError = PutCustomersByIdErrors[keyof PutCustomersByIdErrors];

export type PutCustomersByIdResponses = {
    /**
     * Customer updated successfully
     */
    200: {
        success?: boolean;
        message?: string;
        data?: CustomerResponse;
    };
};

export type PutCustomersByIdResponse = PutCustomersByIdResponses[keyof PutCustomersByIdResponses];

export type GetCustomersByIdAddressesData = {
    body?: never;
    path: {
        /**
         * Customer ID
         */
        id: string;
    };
    query?: never;
    url: '/customers/{id}/addresses';
};

export type GetCustomersByIdAddressesErrors = {
    /**
     * Unauthorized - Authentication required
     */
    401: ErrorResponse;
    /**
     * Forbidden - Insufficient permissions
     */
    403: ErrorResponse;
    /**
     * Not Found - Resource doesn't exist
     */
    404: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type GetCustomersByIdAddressesError = GetCustomersByIdAddressesErrors[keyof GetCustomersByIdAddressesErrors];

export type GetCustomersByIdAddressesResponses = {
    /**
     * Addresses retrieved successfully
     */
    200: {
        success?: boolean;
        message?: string;
        data?: Array<CustomerAddressResponse>;
    };
};

export type GetCustomersByIdAddressesResponse = GetCustomersByIdAddressesResponses[keyof GetCustomersByIdAddressesResponses];

export type PostCustomersByIdAddressesData = {
    body: CreateAddressRequest;
    path: {
        /**
         * Customer ID
         */
        id: string;
    };
    query?: never;
    url: '/customers/{id}/addresses';
};

export type PostCustomersByIdAddressesErrors = {
    /**
     * Bad Request - Validation errors
     */
    400: ErrorResponse;
    /**
     * Unauthorized - Authentication required
     */
    401: ErrorResponse;
    /**
     * Forbidden - Insufficient permissions
     */
    403: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type PostCustomersByIdAddressesError = PostCustomersByIdAddressesErrors[keyof PostCustomersByIdAddressesErrors];

export type PostCustomersByIdAddressesResponses = {
    /**
     * Address created successfully
     */
    201: {
        success?: boolean;
        message?: string;
        data?: CustomerAddressResponse;
    };
};

export type PostCustomersByIdAddressesResponse = PostCustomersByIdAddressesResponses[keyof PostCustomersByIdAddressesResponses];

export type DeleteAddressesByIdData = {
    body?: never;
    path: {
        /**
         * Address ID
         */
        id: string;
    };
    query?: never;
    url: '/addresses/{id}';
};

export type DeleteAddressesByIdErrors = {
    /**
     * Unauthorized - Authentication required
     */
    401: ErrorResponse;
    /**
     * Forbidden - Insufficient permissions
     */
    403: ErrorResponse;
    /**
     * Not Found - Resource doesn't exist
     */
    404: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type DeleteAddressesByIdError = DeleteAddressesByIdErrors[keyof DeleteAddressesByIdErrors];

export type DeleteAddressesByIdResponses = {
    /**
     * Address deleted successfully
     */
    200: SuccessResponse;
};

export type DeleteAddressesByIdResponse = DeleteAddressesByIdResponses[keyof DeleteAddressesByIdResponses];

export type GetAddressesByIdData = {
    body?: never;
    path: {
        /**
         * Address ID
         */
        id: string;
    };
    query?: never;
    url: '/addresses/{id}';
};

export type GetAddressesByIdErrors = {
    /**
     * Unauthorized - Authentication required
     */
    401: ErrorResponse;
    /**
     * Forbidden - Insufficient permissions
     */
    403: ErrorResponse;
    /**
     * Not Found - Resource doesn't exist
     */
    404: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type GetAddressesByIdError = GetAddressesByIdErrors[keyof GetAddressesByIdErrors];

export type GetAddressesByIdResponses = {
    /**
     * Address retrieved successfully
     */
    200: {
        success?: boolean;
        message?: string;
        data?: CustomerAddressResponse;
    };
};

export type GetAddressesByIdResponse = GetAddressesByIdResponses[keyof GetAddressesByIdResponses];

export type PostStorefrontsData = {
    body: CreateStorefrontRequest;
    path?: never;
    query?: never;
    url: '/storefronts';
};

export type PostStorefrontsErrors = {
    /**
     * Bad Request - Validation errors
     */
    400: ErrorResponse;
    /**
     * Unauthorized - Authentication required
     */
    401: ErrorResponse;
    /**
     * Conflict - Resource already exists
     */
    409: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type PostStorefrontsError = PostStorefrontsErrors[keyof PostStorefrontsErrors];

export type PostStorefrontsResponses = {
    /**
     * Storefront created successfully
     */
    201: {
        success?: boolean;
        message?: string;
        data?: StorefrontResponse;
    };
};

export type PostStorefrontsResponse = PostStorefrontsResponses[keyof PostStorefrontsResponses];

export type DeleteStorefrontsByIdData = {
    body?: never;
    path: {
        /**
         * Storefront ID
         */
        id: string;
    };
    query?: never;
    url: '/storefronts/{id}';
};

export type DeleteStorefrontsByIdErrors = {
    /**
     * Unauthorized - Authentication required
     */
    401: ErrorResponse;
    /**
     * Forbidden - Insufficient permissions
     */
    403: ErrorResponse;
    /**
     * Not Found - Resource doesn't exist
     */
    404: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type DeleteStorefrontsByIdError = DeleteStorefrontsByIdErrors[keyof DeleteStorefrontsByIdErrors];

export type DeleteStorefrontsByIdResponses = {
    /**
     * Storefront deleted successfully
     */
    200: SuccessResponse;
};

export type DeleteStorefrontsByIdResponse = DeleteStorefrontsByIdResponses[keyof DeleteStorefrontsByIdResponses];

export type GetStorefrontsByIdData = {
    body?: never;
    path: {
        /**
         * Storefront ID
         */
        id: string;
    };
    query?: never;
    url: '/storefronts/{id}';
};

export type GetStorefrontsByIdErrors = {
    /**
     * Unauthorized - Authentication required
     */
    401: ErrorResponse;
    /**
     * Forbidden - Insufficient permissions
     */
    403: ErrorResponse;
    /**
     * Not Found - Resource doesn't exist
     */
    404: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type GetStorefrontsByIdError = GetStorefrontsByIdErrors[keyof GetStorefrontsByIdErrors];

export type GetStorefrontsByIdResponses = {
    /**
     * Storefront retrieved successfully
     */
    200: {
        success?: boolean;
        message?: string;
        data?: StorefrontResponse;
    };
};

export type GetStorefrontsByIdResponse = GetStorefrontsByIdResponses[keyof GetStorefrontsByIdResponses];

export type GetStorefrontsSlugBySlugData = {
    body?: never;
    path: {
        /**
         * Storefront slug
         */
        slug: string;
    };
    query?: never;
    url: '/storefronts/slug/{slug}';
};

export type GetStorefrontsSlugBySlugErrors = {
    /**
     * Not Found - Resource doesn't exist
     */
    404: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type GetStorefrontsSlugBySlugError = GetStorefrontsSlugBySlugErrors[keyof GetStorefrontsSlugBySlugErrors];

export type GetStorefrontsSlugBySlugResponses = {
    /**
     * Storefront retrieved successfully
     */
    200: {
        success?: boolean;
        message?: string;
        data?: StorefrontResponse;
    };
};

export type GetStorefrontsSlugBySlugResponse = GetStorefrontsSlugBySlugResponses[keyof GetStorefrontsSlugBySlugResponses];
